================  NOTES datacamp day 1
KURS    Intro to Py
status_ restarting. 
pratice exercises? sure lets see wat i rembr
    # type of object
x = 2
type(x)
>   int
ja j kommer ihåg, but not enuf, do the real course again ok, 
just practice the muscle memory

===========
ipython shell is embdded in datacamp exercises
    using py 3.X (idk, dont matter)

- OK exercises do not get me xp anymore which ja fair

================================
- MATH simple math
- PRINT sttmts in parenths ja

=================================
- VARS and TYPES
type(x)
int
float
    what specific details w floats
string
    in 'single quotes' or "double" but CANNOT mix these, no surpr there
    variable methods like concat  but can use math terms like + 
        doubledesc = desc + desc
bool
  Capitalize as True or False, 1 or 0
  trying to mess around w .toString method but no work, 
    if (profitable == True) : {print(type(profitable.toString)) }
    bool object has no attribute 'toString'
      ohhh yeah it's just str(x_boolean_value)
print(type(year1))  # however this works

=========== CONVERT TYPES
str(x)
int(x)
float(True + False) hmm

why am i taking so amny txt notes idk but ithelps for now

##################################  LISTS

. Sqr brackets

listABC = ["a", "b", "c"]

do they all have to be SAME type? YES can have diff types
and can have sublists

################## SUB SET LISTS 
zero indexed, 
negative index from the end, etc
- SLICES, specify range
- FINAL ELEMENT NOT INCLUDED,
    2nd index in the slice specifies to STOP when it reads that 
      start index is INCLUSIVE, end index is EXCLUSIVE
- LEAVE OUT INDEX, means to start at 0 or 
  fam[:4]     - incl from index 0 to 3
  fam[5:]     - incl from element 5 to last element in list (inclusive)

CAN YOU SAY tex fam[5:-1] ? I think this errors - NOPE YES YOU CAN
HOWEVER IT CANNOT COUNT BACKWRADS, like from -2 to -4
    this will give an emptyh list
It only counts FORWARD.  indexes can be anything
  as long as they logically count forward,
  you'öö nmeed to sort list for other stuff

############## LIST METHODS
can update any subset of a list, just reassign, pretty srtaightforward

fam[4] = "new value"
fam[0:2] = "new1", "new2"
delete value using del:
  del(fam[4]) 
when do so, all elements after this one move over by 1 index

REMEMBER a var name is just a reference to the list, not the list iteslf
SO if you assign x to a list,   x = [2, 3, 4]
then copy x into y    y = x
then you change an elmt in that list,
then the values in y also change.
    You copied the REFERENCE to the list stored in memory, not the values

How to define a NEW LIST then?
. use "list" cmd,
  y = list(x)

or slicing using all slices
  y = x[:]

APPEND to list just use +




